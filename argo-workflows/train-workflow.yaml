apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parallel-training-
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: training-conf-list
        value: '[
            { "TASK": "segmentation",
              "SOURCE": "PLEIADES",
              "DEP": "MAYOTTE",
              "YEAR": 2022,
              "TILES_SIZE": 250,
              "TYPE_LABELER": "BDTOPO",
              "USE_S3": 0,
              "EPOCHS": 120,
              "BATCH_SIZE": 8,
              "TEST_BATCH_SIZE": 8,
              "LR": 0.001,
              "BUILDING_CLASS_WEIGHT": 10,
              "LOSS_NAME": "bce_logits_weighted",
              "MODULE_NAME": "single_class_deeplabv3",
              "LABEL_SMOOTHING": 0.0,
              "LOGITS": 1,
              "CUDA": 1
            },
            { "TASK": "segmentation",
              "SOURCE": "PLEIADES",
              "DEP": "MAYOTTE",
              "YEAR": 2022,
              "TILES_SIZE": 250,
              "TYPE_LABELER": "BDTOPO",
              "USE_S3": 0,
              "EPOCHS": 120,
              "BATCH_SIZE": 8,
              "TEST_BATCH_SIZE": 8,
              "LR": 0.001,
              "BUILDING_CLASS_WEIGHT": 15,
              "LOSS_NAME": "bce_logits_weighted",
              "MODULE_NAME": "single_class_deeplabv3",
              "LABEL_SMOOTHING": 0.0,
              "LOGITS": 1,
              "CUDA": 1
            },
            { "TASK": "segmentation",
              "SOURCE": "PLEIADES",
              "DEP": "MAYOTTE",
              "YEAR": 2022,
              "TILES_SIZE": 250,
              "TYPE_LABELER": "BDTOPO",
              "USE_S3": 0,
              "EPOCHS": 120,
              "BATCH_SIZE": 8,
              "TEST_BATCH_SIZE": 8,
              "LR": 0.001,
              "BUILDING_CLASS_WEIGHT": 20,
              "LOSS_NAME": "bce_logits_weighted",
              "MODULE_NAME": "single_class_deeplabv3",
              "LABEL_SMOOTHING": 0.0,
              "LOGITS": 1,
              "CUDA": 1
            }
            ]'

  templates:
    # Entrypoint DAG template
    - name: main
      dag:
        tasks:
          # Task 0: Start pipeline
          - name: start-pipeline
            template: start-pipeline-wt
          # Task 1: Preprocess images
          - name: run-training-with-params
            dependencies: [ start-pipeline ]
            template: run-training-wt
            arguments:
              parameters:
                - name: SOURCE
                  value: "{{item.SOURCE}}"
                - name: DEP
                  value: "{{item.DEP}}"
                - name: YEAR
                  value: "{{item.YEAR}}"
                - name: TYPE_LABELER
                  value: "{{item.TYPE_LABELER}}"
                - name: TASK
                  value: "{{item.TASK}}"
                - name: TILES_SIZE
                  value: "{{item.TILES_SIZE}}"
                - name: USE_S3
                  value: "{{item.USE_S3}}"
                - name: EPOCHS
                  value: "{{item.EPOCHS}}"
                - name: BATCH_SIZE
                  value: "{{item.BATCH_SIZE}}"
                - name: TEST_BATCH_SIZE
                  value: "{{item.TEST_BATCH_SIZE}}"
                - name: LR
                  value: "{{item.LR}}"
                - name: BUILDING_CLASS_WEIGHT
                  value: "{{item.BUILDING_CLASS_WEIGHT}}"
                - name: LOSS_NAME
                  value: "{{item.LOSS_NAME}}"
                - name: MODULE_NAME
                  value: "{{item.MODULE_NAME}}"
                - name: LABEL_SMOOTHING
                  value: "{{item.LABEL_SMOOTHING}}"
                - name: LOGITS
                  value: "{{item.LOGITS}}"
                - name: CUDA
                  value: "{{item.CUDA}}"

            # Pass the inputs to the task using "withParam"
            withParam: "{{workflow.parameters.training-conf-list}}"

    # Now task container templates are defined
    # Worker template for task 0 : start-pipeline
    - name: start-pipeline-wt
      inputs:
      container:
        image: busybox
        command: [ sh, -c ]
        args: [ "echo Starting pipeline" ]

    # Worker template for task-1 : train model with params
    - name: run-training-wt
      inputs:
        parameters:
          - name: SOURCE
          - name: DEP
          - name: YEAR
          - name: TYPE_LABELER
          - name: TASK
          - name: TILES_SIZE
          - name: USE_S3
          - name: EPOCHS
          - name: BATCH_SIZE
          - name: TEST_BATCH_SIZE
          - name: LR
          - name: BUILDING_CLASS_WEIGHT
          - name: LOSS_NAME
          - name: MODULE_NAME
          - name: LABEL_SMOOTHING
          - name: LOGITS
          - name: CUDA
      nodeSelector:
        nvidia.com/gpu.product: "NVIDIA-H100-PCIe"
      container:
        image: inseefrlab/satellite-images-train:v0.0.6
        imagePullPolicy: Always
        resources:
          limits:
            nvidia.com/gpu: 1
        command: ["/bin/bash", -c]
        args: ["git clone https://github.com/InseeFrLab/satellite-images-train.git &&
              cd satellite-images-train/ &&
              export MC_HOST_s3=https://$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY@$AWS_S3_ENDPOINT &&
              mlflow run ~/work/satellite-images-train/ \
                  --env-manager=local \
                  --entry-point $ENTRY_POINT \
                  -P source={{inputs.parameters.SOURCE}} \
                  -P dep={{inputs.parameters.DEP}} \
                  -P year={{inputs.parameters.YEAR}} \
                  -P type_labeler={{inputs.parameters.TYPE_LABELER}} \
                  -P task={{inputs.parameters.TASK}} \
                  -P tiles_size={{inputs.parameters.TILES_SIZE}} \
                  -P epochs={{inputs.parameters.EPOCHS}} \
                  -P batch_size={{inputs.parameters.BATCH_SIZE}} \
                  -P test_batch_size={{inputs.parameters.TEST_BATCH_SIZE}} \
                  -P lr={{inputs.parameters.LR}} \
                  -P from_s3={{inputs.parameters.USE_S3}} \
                  -P loss_name={{inputs.parameters.LOSS_NAME}} \
                  -P module_name={{inputs.parameters.MODULE_NAME}} \
                  -P label_smoothing={{inputs.parameters.LABEL_SMOOTHING}} \
                  -P logits={{inputs.parameters.LOGITS}} \
                  -P cuda={{inputs.parameters.CUDA}}"
              ]
        env:
          # env var for s3 connexion
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: my-s3-creds
                key: secretKey
          - name: AWS_DEFAULT_REGION
            value: us-east-1
          - name: AWS_S3_ENDPOINT
            value: minio.lab.sspcloud.fr
          - name: MLFLOW_S3_ENDPOINT_URL
            value: https://minio.lab.sspcloud.fr
          - name: MLFLOW_TRACKING_URI
            value: https://projet-slums-detection-128833.user.lab.sspcloud.fr
          - name: MLFLOW_EXPERIMENT_NAME
            value: segmentation
          - name: ENTRY_POINT
            value: main
